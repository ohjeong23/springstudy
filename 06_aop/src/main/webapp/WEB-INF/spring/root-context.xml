<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
  
  <!-- Root Context: defines shared resources visible to all other web components -->
    
  <bean class="com.zaxxer.hikari.HikariConfig"
        id="hikariConfig"
        scope="singleton"
        p:driverClassName="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"
        p:jdbcUrl="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"
        p:username="GD"
        p:password="1111" />
   <!-- p는 프로퍼티 대체 -->
  <bean class="com.zaxxer.hikari.HikariDataSource"
        id="hikariDataSource"
        scope="singleton">
    <constructor-arg ref="hikariConfig"/>
  </bean>
  
  <bean class="org.mybatis.spring.SqlSessionFactoryBean"
        id="sqlSessionFactoryBean"
        scope="singleton">
    <property name="dataSource" ref="hikariDataSource"/>
    <property name="configLocation"  value="classpath:com/gdu/prj06/mybatis/config/mybatis-config.xml"/>
    <property name="mapperLocations" value="classpath:com/gdu/prj06/mybatis/mapper/*.xml"/>
  </bean>
   <!-- 여기서 트랜잭션 설정 -->
  <bean class="org.mybatis.spring.SqlSessionTemplate"
        id="sqlSessionTemplate"
        scope="singleton">
    <constructor-arg ref="sqlSessionFactoryBean"/>
  </bean>
  
  <bean class="com.gdu.prj06.dao.ContactDaoImpl"
        id="contactDao"
        scope="singleton">
    <constructor-arg ref="sqlSessionTemplate"/>
  </bean>
  
  <bean class="com.gdu.prj06.service.ContactServiceImpl"
        id="contactService"
        scope="singleton">
    <constructor-arg ref="contactDao" />
  </bean>

  <!-- 트랜잭션 관리자 등록 -->
  <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
        id="dataSourceTransactionManager"
        scope="singleton">
    <property name="dataSource" ref="hikariDataSource"/>
  <!-- 데이타 소스 레퍼런스는 다른 빈이라는 뜻 
       p:래퍼런스-->
  </bean>
  
  <!-- 트랜잭션 Advice 등록 -->
<!-- 트랜잭션 Advice 등록하기
    tx 태그라이브러리랑 같이 앞에 
     트랜잭션 속성 설정
     서비스의 어떤 메소드에 트랜잭션 걸어줄 건지.
     모든으로 걸어놓고 제외로 시킬거 적기
     select 두개 제외시킬거 메소드 이름이 겟으로 시작하니까 제외로 빼기 좋다.
     get select 읽기만 
     성능때문에 하는거 필요가 없어서 그냥 빼는거 안넣어도 됨
     읽기 전용 걸어놓으면 트랜잭션 대상이 아니다.
     모두 트랜잭션 처리하되 이건 제외다. 
     -->
  <tx:advice transaction-manager="dataSourceTransactionManager"
             id="txAdvice">
    <tx:attributes>
      <tx:method name="*"/>
      <tx:method name="get*" read-only="true"/>
    </tx:attributes>
  </tx:advice>
  
  <!-- Aspect 설정 -->
  <aop:config>
    <aop:pointcut expression="execution (* com.gdu.prj06.service.*Impl.*(..))"
                  id="txPointCut"/><!-- //어떤 작업을 할 것인지 -->
    <aop:advisor advice-ref="txAdvice" 
                 pointcut-ref="txPointCut"/>
                  <!-- //적용할 지점 어디에 적용할 것인지 -->
  </aop:config>
    <!-- AspectJ 허용 열고 닫는거 필요없음
     에피피컨피그에 넣은 적 있음 
     (@EnableAspectJAutoProxy)-->
  <!-- AspectJ 허용 (@EnableAspectJAutoProxy) -->
  <aop:aspectj-autoproxy/>
  
</beans>